{
  "mcp_yggdrasil_mandatory_workflow": {
    "description": "CRITICAL: Follow these steps in EVERY session to maintain project integrity",
    
    "step_0_read_memory": {
      "title": "READ THIS MEMORY FILE FIRST",
      "critical": "ALWAYS start by reading memory.json to understand the complete workflow",
      "priority": "HIGHEST"
    },
    
    "step_1_project_analysis": {
      "title": "Project Analysis & Verification",
      "ðŸš¨_CRITICAL_WARNING": "NEVER CLAIM COMPLETION WITHOUT READING ENTIRE FILES",
      "actions": [
        "1. Read claude.md - Current context (this file)",
        "2. Read plan.md - Overview of all phases", 
        "3. Read updates/09_implementation_status.md - Current progress",
        "4. Read updates/[current_phase].md - Full implementation details",
        "5. ðŸš¨ ALWAYS READ COMPLETE FILES when verifying implementation",
        "6. ðŸš¨ NEVER rely on partial reads (first 50-100 lines) for completion claims",
        "7. ðŸš¨ ALWAYS compare implementation against FULL Phase specifications",
        "8. Verify implementation status against actual code",
        "9. Update percentages based on reality"
      ],
      "file_reading_protocol": {
        "MANDATORY": [
          "Read ENTIRE files when checking implementation status",
          "Compare actual code against complete Phase specifications",
          "User feedback: 'READ THE ENTIRE FILES EVERYTIME PLEASE. I'm tired of asking'"
        ],
        "NEVER": [
          "Claim completion based on partial file reads",
          "Skip verification of claimed completions",
          "Assume implementation matches documentation without checking"
        ]
      }
    },
    
    "step_2_task_planning": {
      "title": "Task Planning",
      "actions": [
        "Create TODO list using TodoWrite tool",
        "Include all session objectives from claude.md",
        "Set appropriate priorities (critical/high/medium)"
      ]
    },
    
    "step_3_documentation": {
      "title": "Session Documentation",
      "actions": [
        "Create session log in /chat_logs/",
        "Format: YYYY-MM-DD_HH-MM_phase-X-task-description.md",
        "Update throughout session with completed tasks"
      ]
    },
    
    "step_4_duplicate_prevention_and_modular_design": {
      "title": "Duplicate Prevention & Anti-Monolithic Design - MANDATORY",
      "critical": "ALWAYS check before creating ANY file AND ensure modular design",
      "actions": [
        "1. Check updates/08_repository_structure.md for existing files",
        "2. Grep pattern='[feature_name]' glob='**/*.py'",
        "3. LS path='[target_directory]'",
        "4. If similar functionality exists: enhance existing file",
        "5. Archive old files to /archive/ directory if replacing",
        "6. CHECK FILE SIZE TARGET: Maximum 500 lines per file (ENFORCED July 23+)",
        "7. If >200 lines expected, plan modular structure BEFORE coding",
        "8. Read updates/refactoring/prompt.md for complete modular guidelines",
        "9. Design structure based on code type (flexible approach):",
        "   AI Agents: models.py + [component]_manager.py + utils.py + __init__.py",
        "   APIs: models.py + routes.py + handlers.py + utils.py",
        "   Data Processing: models.py + processors.py + validators.py + utils.py",
        "10. Each module: single responsibility, <500 lines, clear purpose",
        "11. Archive original files to /archive/ when refactoring",
        "12. Update __init__.py for clean package interface"
      ]
    },
    
    "step_5_implementation": {
      "title": "Implementation",
      "actions": [
        "Follow phase-specific checklist from updates/ files",
        "Update TODO status as you progress",
        "Test each component before marking complete",
        "Read entire phase files - don't skip anything"
      ]
    },
    
    "step_6_progress_update_and_file_management": {
      "title": "Progress Update & File Size Management - CRITICAL",
      "actions": [
        "Update updates/09_implementation_status.md with completed tasks",
        "SHRINK UPDATE FILES: Replace detailed code with concise completion summaries",
        "Update updates/[current_phase].md to mark completed items with âœ… COMPLETE status",
        "REDUCE FILE SIZE: Remove implementation code blocks, keep only essential info",
        "Add completion dates and archive references where applicable",
        "Update claude.md 'Current Focus' section with checkmarks",
        "Update claude.md 'Next Steps' & 'Project Status' sections",
        "Move completed items to p_completed.md",
        "Document any blockers or issues"
      ],
      "file_size_reduction_protocol": {
        "when_tasks_complete": [
          "Replace detailed implementation code with concise completion summaries",
          "Add 'âœ… COMPLETE' status with completion date",
          "Reference archive location for full details if moved",
          "Keep only essential info (file names, line counts, key features)",
          "Maintain task structure but drastically reduce content size"
        ],
        "goal": "Save tokens and prevent context window depletion"
      },
      "files_to_update": {
        "09_implementation_status.md": "Overall progress percentages and recent updates",
        "[current_phase].md": "Shrink completed tasks to summaries",
        "claude.md": "Current focus items and project status summary"
      }
    }
  },
  
  "important_file_locations": {
    "project_root": "/Users/grant/Documents/GitHub/MCP_Ygg/",
    "windows_path": "C:\\Users\\zochr\\Desktop\\GitHub\\Yggdrasil\\MCP_Ygg\\",
    
    "core_documentation": {
      "claude_md": "claude.md - Project context and current status",
      "plan_md": "plan.md - Master development plan",
      "p_completed_md": "p_completed.md - Completed work archive"
    },
    
    "update_files": {
      "directory": "updates/",
      "files": {
        "01_foundation_fixes.md": "Week 1-2: Technical debt",
        "02_performance_optimization.md": "Week 3-4: Performance & Enhanced AI Agents",
        "03_scraper_enhancement.md": "Week 5-6: Scraping",
        "04_data_validation.md": "Week 7-8: Validation",
        "05_ui_workspace.md": "Week 9-10: UI fixes",
        "06_technical_specs.md": "Architecture reference",
        "07_metrics_timeline.md": "KPIs & timeline",
        "08_repository_structure.md": "CRITICAL: File system map - CHECK BEFORE CREATING FILES",
        "09_implementation_status.md": "Progress tracking"
      }
    },
    
    "key_directories": {
      "agents": "20+ AI agents - check before creating new",
      "api": "FastAPI backend",
      "cache": "Redis caching",
      "CSV": "371+ concepts across 6 domains",
      "streamlit_workspace": "UI with 8 pages",
      "tests": "Test suite",
      "archive": "Archived/deprecated files",
      "chat_logs": "Session documentation"
    }
  },
  
  "mcp_servers_config": {
    "memory": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-memory"],
      "env": {
        "MEMORY_FILE_PATH": "/Users/grant/Documents/GitHub/MCP_Ygg/chat_logs/memory.json"
      }
    },
    "sequential-thinking": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"]
    },
    "context7": {
      "serverUrl": "https://mcp.context7.com/sse",
      "note": "USE CONTEXT7 FOR ALL CODING TASKS"
    },
    "git": {
      "command": "uvx",
      "args": ["mcp-server-git"]
    }
  },
  
  "critical_warnings": {
    "duplicate_prevention": [
      "ALWAYS check updates/08_repository_structure.md FIRST",
      "Search for existing functionality before creating files",
      "Enhance existing files rather than creating new ones"
    ],
    "anti_monolithic_files": [
      "ðŸš¨ MAXIMUM 500 lines per file - ENFORCED since July 23, 2025",
      "Plan modular structure if >200 lines expected, implement if >500",
      "Must read updates/refactoring/prompt.md before large implementations",
      "Structure adapts to code type: AI agents â‰  APIs â‰  data processing",
      "Archive original files to /archive/ when refactoring (with .bak extension)",
      "Success example: enhanced_vector_indexer (875 lines) â†’ 5 modular files:",
      "  models.py (121 lines), utils.py (205 lines), model_manager.py (338 lines)",
      "  quality_checker.py (337 lines), enhanced_indexer.py (534 lines)",
      "Always update __init__.py for clean package exports"
    ],
    "known_duplicates": [
      "analytics/ exists in both root and agents/",
      "Use agents/analytics/ for new analytics agents"
    ],
    "do_not_skip": [
      "Reading complete phase specifications",
      "Verifying claimed completions against actual code",
      "Testing imports and functionality",
      "Updating progress tracking",
      "Checking file size before implementation"
    ]
  },
  
  "project_context": {
    "name": "MCP Yggdrasil",
    "description": "Enterprise-grade knowledge management system",
    "tech_stack": "Python, Rust (Qdrant), Cypher (Neo4j), TypeScript (Streamlit)",
    "architecture": {
      "Neo4j": "Knowledge graph for complex relationships (371+ concepts)",
      "Qdrant": "Vector search for semantic queries (7 collections)",
      "Redis": "High-performance caching and session management",
      "FastAPI": "Async REST API with performance optimization",
      "Streamlit": "Interactive database management UI (8 pages)"
    },
    "domains": ["Art", "Language", "Mathematics", "Philosophy", "Science", "Technology"],
    "current_phase": "Phase 5: UI Workspace Enhancement (API-First Architecture)",
    "overall_progress": "83% of 12-week roadmap"
  }
}